##########################################################################################
# Customize file classifications.                                                        #
##########################################################################################

##########################################################################################
# Use the `path_classifiers` block to define changes to the default classification of    #
# files.                                                                                 #
##########################################################################################

path_classifiers:
  docs:
    # Identify the top-level file called `generate_javadoc.py` as documentation-related.
    - samples
  test:
    # Override LGTM's default classification of test files by excluding all files.
    - exclude: /
    # Classify all files in the top-level directories test/ and testsuites/ as test code.
    - test
    - testsuites
    # Classify all files with suffix `.test` as test code.
    #        Note: use only forward slash / as a path separator.
    #        Use ** to indicate an arbitrary parent path.
    #        Use * to indicate any sequence of characters excluding /.
    #        Always enclose the expression in double quotes if it includes *.
    - "**/*.test"
    # Refine the classifications above by excluding files in test/util/.
    - exclude: test/util
  # The default behavior is to tag all files created during the
  # build as `generated`. Results are hidden for generated code. You can tag 
  # further files as being generated by adding them to the `generated` section.
  generated:
    # Exclude all `*.c` files under the `ui/` directory from classification as 
    # generated code.
    - exclude: ui/**/*.c
    # By default, all files not checked into the repository are considered to be
    # 'generated'.
  # The default behavior is to tag library code as `library`. Results are hidden 
  # for library code. You can tag further files as being library code by adding them
  # to the `library` section.
  library:
    - exclude: path/to/libary/code/**/*.c
  # The default behavior is to tag template files as `template`. Results are hidden 
  # for template files. You can tag further files as being template files by adding 
  # them to the `template` section.
  template:
    - exclude: path/to/template/code/**/*.c
  # Define your own category, for example: 'some_custom_category'.
  some_custom_category:
    # Classify all files in the top-level directory tools/ (or the top-level file 
    # called tools).
    - tools
    - utils

#########################################################################################
# Use the `queries` block to change the default display of query results.               #
#########################################################################################

queries:
  # Start by hiding the results of all queries.
  - exclude: "*"
  - include:           
      tags:
        - "security"
        - "correctness"           
        - "maintainability"
  - exclude: py/implicit-string-concatenation-in-list
